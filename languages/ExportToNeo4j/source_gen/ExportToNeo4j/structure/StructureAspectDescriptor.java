package ExportToNeo4j.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptExportToNeo4j = createDescriptorForExportToNeo4j();
  /*package*/ final ConceptDescriptor myConceptModule = createDescriptorForModule();
  /*package*/ final ConceptDescriptor myConceptModuleReference = createDescriptorForModuleReference();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptExportToNeo4j, myConceptModule, myConceptModuleReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ExportToNeo4j:
        return myConceptExportToNeo4j;
      case LanguageConceptSwitch.Module:
        return myConceptModule;
      case LanguageConceptSwitch.ModuleReference:
        return myConceptModuleReference;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForExportToNeo4j() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExportToNeo4j", "ExportToNeo4j", 0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4415fcfL);
    b.class_(false, false, true);
    b.origin("r:4fadda69-ebe4-4bcc-9b24-af2773402c7a(ExportToNeo4j.structure)/7549105345931599823");
    b.version(2);
    b.aggregate("modulesExported", 0x68c3cf50b442a1d4L).target(0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4430249L).optional(true).ordered(true).multiple(true).origin("7549105345931682260").done();
    b.aggregate("modules", 0x68c3cf50b4430449L).target(0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4430210L).optional(true).ordered(true).multiple(true).origin("7549105345931707465").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExportToNeo4j", "Module", 0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4430210L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:4fadda69-ebe4-4bcc-9b24-af2773402c7a(ExportToNeo4j.structure)/7549105345931706896");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModuleReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExportToNeo4j", "ModuleReference", 0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4430249L);
    b.class_(false, false, false);
    b.origin("r:4fadda69-ebe4-4bcc-9b24-af2773402c7a(ExportToNeo4j.structure)/7549105345931706953");
    b.version(2);
    b.associate("module", 0x68c3cf50b443024aL).target(0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4430210L).optional(false).origin("7549105345931706954").done();
    return b.create();
  }
}

package ExportToNeo4j.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import ExportToNeo4j.behavior.Export;
import ExportToNeo4j.behavior.Helper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class run_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public run_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:705981c3-f23a-4a3b-8a9b-539e1fa4b904(ExportToNeo4j.intentions)", "7549105345931566871"));
  }
  @Override
  public String getPresentation() {
    return "run";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Export Modules to Neo4j";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      for (SNode module : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.modulesExported$tuA9))) {
        Export.main(Helper.Neo4j.getSModule(SPropertyOperations.getString(SLinkOperations.getTarget(module, LINKS.module$QARw), PROPS.name$tAp1)));
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return run_Intention.this;
    }
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink module$QARw = MetaAdapterFactory.getReferenceLink(0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4430249L, 0x68c3cf50b443024aL, "module");
    /*package*/ static final SContainmentLink modulesExported$tuA9 = MetaAdapterFactory.getContainmentLink(0x51b96d8c96c640cfL, 0x9e04d484a4ac7485L, 0x68c3cf50b4415fcfL, 0x68c3cf50b442a1d4L, "modulesExported");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}

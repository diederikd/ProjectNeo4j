package lang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptconceptA = createDescriptorForconceptA();
  /*package*/ final ConceptDescriptor myConceptconceptB = createDescriptorForconceptB();
  /*package*/ final ConceptDescriptor myConceptrootConcept = createDescriptorForrootConcept();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptconceptA, myConceptconceptB, myConceptrootConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.conceptA:
        return myConceptconceptA;
      case LanguageConceptSwitch.conceptB:
        return myConceptconceptB;
      case LanguageConceptSwitch.rootConcept:
        return myConceptrootConcept;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForconceptA() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("lang", "conceptA", 0x8ef710002c5f42a8L, 0xa49b6e266ef0e636L, 0x98b8c4b9650d52cL);
    b.class_(false, false, false);
    b.origin("r:0d8459d3-7b48-45ba-9a33-135268de5ab3(lang.structure)/687797624376448300");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForconceptB() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("lang", "conceptB", 0x8ef710002c5f42a8L, 0xa49b6e266ef0e636L, 0x98b8c4b9650d52dL);
    b.class_(false, false, false);
    b.origin("r:0d8459d3-7b48-45ba-9a33-135268de5ab3(lang.structure)/687797624376448301");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForrootConcept() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("lang", "rootConcept", 0x8ef710002c5f42a8L, 0xa49b6e266ef0e636L, 0x98b8c4b9650d52bL);
    b.class_(false, false, true);
    b.origin("r:0d8459d3-7b48-45ba-9a33-135268de5ab3(lang.structure)/687797624376448299");
    b.version(2);
    b.aggregate("childConceptA", 0x98b8c4b9650d52eL).target(0x8ef710002c5f42a8L, 0xa49b6e266ef0e636L, 0x98b8c4b9650d52cL).optional(true).ordered(true).multiple(true).origin("687797624376448302").done();
    b.aggregate("childConceptB", 0x98b8c4b9650d530L).target(0x8ef710002c5f42a8L, 0xa49b6e266ef0e636L, 0x98b8c4b9650d52dL).optional(true).ordered(true).multiple(true).origin("687797624376448304").done();
    return b.create();
  }
}

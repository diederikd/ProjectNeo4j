package lang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_conceptA;
  private ConceptPresentation props_conceptB;
  private ConceptPresentation props_rootConcept;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.conceptA:
        if (props_conceptA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("conceptA");
          props_conceptA = cpb.create();
        }
        return props_conceptA;
      case LanguageConceptSwitch.conceptB:
        if (props_conceptB == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("conceptB");
          props_conceptB = cpb.create();
        }
        return props_conceptB;
      case LanguageConceptSwitch.rootConcept:
        if (props_rootConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("rootConcept");
          props_rootConcept = cpb.create();
        }
        return props_rootConcept;
    }
    return null;
  }
}
